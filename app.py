from flask import Flask, render_template, request, redirect, session, url_for, jsonify, Response
import json, os
import secrets
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
from langchain.prompts import PromptTemplate
import cv2
import threading
import subprocess


# Khai b√°o API key
os.environ["GOOGLE_API_KEY"] = "AIzaSyDmYy5FP4sY1Te1OX1OPtKcFWNfAcY0hbI"
llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash")

SYSTEM_PROMPT = """B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n gi√°m s√°t h·ªá th·ªëng camera.
H√£y tr·∫£ l·ªùi r√µ r√†ng, ch√≠nh x√°c, ng·∫Øn g·ªçn. Gi√∫p ng∆∞·ªùi d√πng gi√°m s√°t c√°c khu v·ª±c b·∫±ng camera. 
T·∫°o t·∫°i kho·∫£ng b·∫±ng c√°ch nh·∫•n v√†o t·∫°o t√†i kho·∫£ng m·ªõi.
!!Quan tr·ªçng: Khi c·∫ßn li√™n h·ªá kh·∫©n c·∫•p cho admin h√£y li√™n h·ªá s·ªë (+84) 985971459
N·∫øu qu√™n m·∫≠t kh·∫©u th√¨ li√™n h·ªá v·ªõi admin ho·∫∑c t·∫°o t√†i kho·∫£n m·ªõi lu√¥n cho nhanh.
N·∫øu ai h·ªèi b·∫°n LLM g√¨? Th√¨ b·∫°n tr·∫£ l·ªùi: l√† d√πng API c·ªßa google c·ª• th·ªÉ l√† Gemini 2.0 Flash.
N·∫øu h·ªèi ng√†y gi·ªù th√¨ g·ª£i √Ω ng∆∞·ªùi ta nh√¨n g√≥c tr√™n b√™n tr√°i.
N·∫øu ng∆∞·ªùi ta h·ªèi v·ªÅ kƒ© thu·∫≠t th√¨ h√£y tr·∫£ l·ªùi d·ª±a v√†o nh·ªØng - b√™n d∆∞·ªõi:
- Ch·ªâ c√≥ 2 camera do ƒëang m√¥ ph·ªèng v√† h·ªá th·ªëng c√≥ kh·∫£ nƒÉng cho ch·ªçn ng∆∞·ªùi ƒë·ªÉ tracking. 
- D√πng Yolo v√† reid v√† m·ªôt s·ªë thu·∫≠t to√°n ƒë·ªÉ ho√†n th√†nh h·ªá th·ªëng. 
- Camera d√πng l√† Brio500 c·ªßa logitech. 
- Jetson orin nano v√† Jetson nano d√πng ƒë·ªÉ th·ª±c hi·ªán h·ªá th·ªëng khi ng∆∞·ªùi ta h·ªèi d√πng g√¨ v·ªõi camera hay m√°y t√≠nh nh√∫ng g√¨.
- D√πng webocket v·ªõi flask c·ªßa python khi mu·ªën l√†m giao di·ªán web v√† ngrok ƒë·ªÉ public.
"""

camera = cv2.VideoCapture(0)  # 0 l√† camera m·∫∑c ƒë·ªãnh (webcam)

def generate_secret_key(length=32):
    return secrets.token_hex(length)

app = Flask(__name__)
app.secret_key = generate_secret_key()

USERS_FILE = 'users.json'



def generate_frames():
   

    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            # Encode frame th√†nh JPEG
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()

            # Tr·∫£ v·ªÅ frame d·∫°ng multipart
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


@app.route('/video_feed')
def video_feed():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')



# Load v√† l∆∞u ng∆∞·ªùi d√πng
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE) as f:
            return json.load(f)
    return {}

def save_users(users):
    # S·∫Øp x·∫øp admin tr∆∞·ªõc, user sau
    sorted_users = dict(
        sorted(users.items(), key=lambda item: 0 if item[1]['role'] == 'admin' else 1)
    )
    with open(USERS_FILE, 'w') as f:
        json.dump(sorted_users, f, indent=4)


@app.route('/sudoku')
def sudoku():
    return render_template('sudoku.html')

# B·ªô nh·ªõ h·ªôi tho·∫°i
user_memory = {}

@app.route('/chat-api', methods=['POST'])
def chat_api():
    user = session.get('user', 'guest')
    data = request.get_json()
    message = data.get('message', '')

    if user not in user_memory:
        user_memory[user] = ConversationChain(
            llm=llm,
            memory=ConversationBufferMemory(),
            verbose=False,
            prompt=PromptTemplate(
                input_variables=["history", "input"],
                template=(
                    SYSTEM_PROMPT + "\n\n"
                    "L·ªãch s·ª≠ tr√≤ chuy·ªán:\n{history}\n"
                    "Ng∆∞·ªùi d√πng: {input}\nTr·ª£ l√Ω:"
                )
            )
        )

    chain = user_memory[user]
    response = chain.run(message)
    return jsonify({"reply": response})

# Trang ƒëƒÉng nh·∫≠p
@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        users = load_users()
        username = request.form['username']
        password = request.form['password']
        if username in users and users[username]['password'] == password:
            session['user'] = username
            session['role'] = users[username]['role']
            # üîÅ Chuy·ªÉn h∆∞·ªõng theo vai tr√≤
            if session['role'] == 'admin':
                return redirect(url_for('admin_panel'))
            else:
                return redirect(url_for('dashboard'))
        return render_template('login.html', error="Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.")
    return render_template('login.html')
# Dashboard ch√≠nh
@app.route('/dashboard')
def dashboard():
    role = session.get('role')
    user = session.get('user')

    if role == 'admin':
        return redirect(url_for('admin_panel'))  # Admin -> Trang qu·∫£n tr·ªã

    # Ng∆∞·ªùi d√πng th∆∞·ªùng -> Giao di·ªán camera
    return render_template('user.html', user=user, role=role)

# ƒêƒÉng xu·∫•t
@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))


# Admin panel m·ªõi v·ªõi giao di·ªán b√™n tr√°i
@app.route('/admin', methods=['GET', 'POST'])
def admin_panel():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403
    return render_template('admin_panel.html', user=session['user'])

@app.route('/quan-ly-user')
def quan_ly_user():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403
    users = load_users()
    total_admins = sum(1 for u in users.values() if u['role'] == 'admin')
    return render_template('quan_ly_user.html', users=users, total_admins=total_admins)

@app.route('/xoa-user/<username>', methods=['POST'])
def delete_user(username):
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403

    users = load_users()
    if username in users:
        # Kh√¥ng cho x√≥a admin cu·ªëi c√πng
        if users[username]['role'] == 'admin':
            admin_count = sum(1 for u in users.values() if u['role'] == 'admin')
            if admin_count <= 1:
                return "Kh√¥ng th·ªÉ x√≥a admin cu·ªëi c√πng!", 400
        users.pop(username)
        save_users(users)
    return redirect(url_for('quan_ly_user'))

@app.route('/add-admin', methods=['GET', 'POST'])
def add_admin():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403

    users = load_users()
    current_user = session.get('user')

    if request.method == 'POST':
        confirm_password = request.form['confirm_password']
        new_username = request.form['username']
        new_password = request.form['password']

        # Ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u c·ªßa admin hi·ªán t·∫°i
        if users[current_user]['password'] != confirm_password:
            return render_template('add_admin.html', error="M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng ƒë√∫ng!")

        # Ki·ªÉm tra tr√πng t√™n
        if new_username in users:
            return render_template('add_admin.html', error="T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!")

        # Th√™m admin m·ªõi
        users[new_username] = {"password": new_password, "role": "admin"}
        save_users(users)
        return redirect(url_for('quan_ly_user'))

    return render_template('add_admin.html')

@app.route('/doi-mat-khau/<username>', methods=['GET', 'POST'])
def doi_mat_khau_user(username):
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403

    users = load_users()
    if username not in users:
        return "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i", 404

    is_self = (session['user'] == username)
    error = None

    if request.method == 'POST':
        if is_self:
            old_password = request.form['old_password']
            if users[username]['password'] != old_password:
                error = "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!"
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            error = "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!"
        elif not error:
            users[username]['password'] = new_password
            save_users(users)
            return redirect(url_for('quan_ly_user'))

    return render_template('doi_mat_khau_user.html', username=username, error=error, is_self=is_self)



# Th√™m ng∆∞·ªùi d√πng
@app.route('/add-user', methods=['GET', 'POST'])
@app.route('/add-user', methods=['GET', 'POST'])
def add_user():
    users = load_users()
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm = request.form['confirm']  # l·∫•y gi√° tr·ªã x√°c nh·∫≠n m·∫≠t kh·∫©u

        if username in users:
            return render_template('add_user.html', error="T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!")

        if password != confirm:
            return render_template('add_user.html', error="M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")

        users[username] = {"password": password, "role": "user"}
        save_users(users)
        return redirect(url_for('login'))
    
    return render_template('add_user.html')

def run_label_studio():
    subprocess.Popen(["label-studio"], stdout=subprocess.DEVNULL)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/start-label')
def start_label():
    threading.Thread(target=run_label_studio).start()
    return redirect("http://localhost:8080", code=302)

if __name__ == '__main__':
    try:
       # app.run(debug=True)
        app.run(port=5000)
    finally:
        camera.release()